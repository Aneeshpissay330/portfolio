name: Next.js CI/CD to Hostinger

on:
  push:
    branches:
      - master # Trigger on pushes to the master branch

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout Repository
        uses: actions/checkout@v4

      - name: üîë Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: ‚öôÔ∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üèóÔ∏è Build and Push Docker Image
        uses: docker/build-push-action@v5
        id: docker_build
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.IMAGE_NAME }}:${{ github.sha }},${{ secrets.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: üöÄ SSH and Deploy to Hostinger VPS
        uses: appleboy/ssh-action@v1.0.1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # 1. Login to Docker Hub on the VPS (if using a private repo, otherwise skip)
            # docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}

            # 2. Define image name, tag, and a valid container name
            IMAGE_NAME=${{ secrets.IMAGE_NAME }}
            TAG=latest
            CONTAINER_NAME=portfolio-app

            # 3. Stop and remove the old container (if running)
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true

            # 4. Pull the new image from Docker Hub
            docker pull $IMAGE_NAME:$TAG

            # 5. Run the new container
            # Maps VPS port 80 to container port 3000 (Next.js default)
            docker run -d \
              --name $CONTAINER_NAME \
              -p 8080:3000 \
              --restart always \
              $IMAGE_NAME:$TAG

            # 6. Clean up old images to save space
            docker image prune -f
            
            echo "Deployment complete! Application running on port 8080 of the VPS."